// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping_c.proto

package protogen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingCReq struct {
	Now                  int64    `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingCReq) Reset()         { *m = PingCReq{} }
func (m *PingCReq) String() string { return proto.CompactTextString(m) }
func (*PingCReq) ProtoMessage()    {}
func (*PingCReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c27a492a266e4f1, []int{0}
}

func (m *PingCReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingCReq.Unmarshal(m, b)
}
func (m *PingCReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingCReq.Marshal(b, m, deterministic)
}
func (m *PingCReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingCReq.Merge(m, src)
}
func (m *PingCReq) XXX_Size() int {
	return xxx_messageInfo_PingCReq.Size(m)
}
func (m *PingCReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingCReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingCReq proto.InternalMessageInfo

func (m *PingCReq) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *PingCReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type PingCResponse struct {
	Now                  int64    `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingCResponse) Reset()         { *m = PingCResponse{} }
func (m *PingCResponse) String() string { return proto.CompactTextString(m) }
func (*PingCResponse) ProtoMessage()    {}
func (*PingCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c27a492a266e4f1, []int{1}
}

func (m *PingCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingCResponse.Unmarshal(m, b)
}
func (m *PingCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingCResponse.Marshal(b, m, deterministic)
}
func (m *PingCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingCResponse.Merge(m, src)
}
func (m *PingCResponse) XXX_Size() int {
	return xxx_messageInfo_PingCResponse.Size(m)
}
func (m *PingCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingCResponse proto.InternalMessageInfo

func (m *PingCResponse) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func init() {
	proto.RegisterType((*PingCReq)(nil), "pb.PingCReq")
	proto.RegisterType((*PingCResponse)(nil), "pb.PingCResponse")
}

func init() { proto.RegisterFile("ping_c.proto", fileDescriptor_6c27a492a266e4f1) }

var fileDescriptor_6c27a492a266e4f1 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc8, 0xcc, 0x4b,
	0x8f, 0x4f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe0, 0xe2,
	0x08, 0xc8, 0xcc, 0x4b, 0x77, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0xce, 0xcb, 0x2f, 0x97,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0x31, 0x85, 0x84, 0xb8, 0x58, 0xd2, 0x8a, 0xf2, 0x73,
	0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x45, 0x2e, 0x5e, 0xa8, 0x8e, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x4c, 0x6d, 0x46, 0xc6, 0x5c, 0xac, 0x60, 0x25, 0x42, 0x5a, 0x30,
	0x06, 0x8f, 0x5e, 0x41, 0x92, 0x1e, 0xcc, 0x22, 0x29, 0x41, 0x24, 0x1e, 0xc4, 0x10, 0x25, 0x06,
	0x27, 0xae, 0x28, 0x0e, 0xb0, 0xb3, 0xd2, 0x53, 0xf3, 0x92, 0xd8, 0xc0, 0x2c, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4f, 0x77, 0x8e, 0x7b, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingCClient is the client API for PingC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingCClient interface {
	PingC(ctx context.Context, in *PingCReq, opts ...grpc.CallOption) (*PingCResponse, error)
}

type pingCClient struct {
	cc *grpc.ClientConn
}

func NewPingCClient(cc *grpc.ClientConn) PingCClient {
	return &pingCClient{cc}
}

func (c *pingCClient) PingC(ctx context.Context, in *PingCReq, opts ...grpc.CallOption) (*PingCResponse, error) {
	out := new(PingCResponse)
	err := c.cc.Invoke(ctx, "/pb.PingC/PingC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingCServer is the server API for PingC service.
type PingCServer interface {
	PingC(context.Context, *PingCReq) (*PingCResponse, error)
}

func RegisterPingCServer(s *grpc.Server, srv PingCServer) {
	s.RegisterService(&_PingC_serviceDesc, srv)
}

func _PingC_PingC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingCServer).PingC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PingC/PingC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingCServer).PingC(ctx, req.(*PingCReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PingC",
	HandlerType: (*PingCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingC",
			Handler:    _PingC_PingC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping_c.proto",
}
